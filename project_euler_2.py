"""
    Project Euler 2: Even Fibonacci numbers

    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
    the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
    even-valued terms.
"""
import time


def find_sum_of_even_fibonnaci_terms(number):
    """
    Find sum of even fibonacci terms less than or equal 'number'
    :param number: input number
    :return: the sum
    """
    # The first three Fibonancci numbers
    fib1, fib2, fib3 = 1, 2, 3
    fib_sum = fib2

    # Use those three variables to represent the last three Fibonacci numbers
    while True:
        fib1 = fib2
        fib2 = fib3
        fib3 += fib1

        if fib3 > number:
            break

        if fib3 % 2 == 0:
            fib_sum += fib3

    return fib_sum


def main():
    pass
    start_time = time.time()
    result = find_sum_of_even_fibonnaci_terms(4000000)
    print("Result is {0} found in {1} seconds".format(result, time.time() - start_time))


if __name__ == "__main__":
    main()

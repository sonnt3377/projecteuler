# coding=utf-8

"""
    Project Euler 44: Pentagon numbers

    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal
    numbers are: 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
    However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference
    are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
"""
import time
import project_euler

def do_work():
    """
    Find the solution for this problem

    :return:
    """
    n = 2
    m = 0
    d = 0
    is_result_found = False

    while not is_result_found:
        large_pentagon = n * (3 * n - 1) / 2

        # Check all smaller pentagons
        for m in range(n - 1, 0, -1):
            small_pentagon = m * (3 * m - 1) / 2
            # If the number is found
            if project_euler.is_pentagonal(large_pentagon + small_pentagon) \
               and project_euler.is_pentagonal(large_pentagon - small_pentagon):
                d = large_pentagon - small_pentagon
                is_result_found = True
                break
        n += 1

    return n - 1, m, d


def main():
    """
    Test
    """
    start_time = time.time()
    result = do_work()
    print("The value of D is {0}, found in {1} seconds\nTwo numbers are: {2} and {3}".
          format(result[2], time.time() - start_time, result[0], result[1]))


if __name__ == "__main__":
    main()

"""
    Project Euler 45: Triangular, pentagonal, and hexagonal

    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	Hn=n(2n−1)   	  	1, 6, 15, 28, 45, ...

    It can be verified that T285 = P165 = H143 = 40755.

    Find the next triangle number that is also pentagonal and hexagonal.
"""
import time
import math


# Identical method to that in Project Euler 44
def is_pentagonal_number(n):
    """
    Check if an integer is a pentagon
    Ref: https://en.wikipedia.org/wiki/Pentagonal_number#Tests_for_pentagonal_numbers

    :param n: number to check
    :return: True if the number is pentagonal, False otherwise.
    """
    test = (math.sqrt(24 * n + 1) + 1) / 6
    return test == int(test)


def do_work():
    """
    Find the triangle number that is also pentagonal and hexagonal

    Analysis:
        Ref: https://www.mathblog.dk/project-euler-45-next-triangle-pentagonal-hexagonal-number/
        A hexagonal number is a triangular number with odd n because:
        T(2m-1) = (2m-1)2m/2 = m(2m-1) = H(m)

    So all we need is to check for hexagonal and pentagonal numbers, because a hexagonal number is actually a
        triangular number

    :return:
    """
    # Starting from the next hexagonal number e.g. m = 144
    m = 144

    while True:
        hexagonal_number = m * (2 * m - 1)
        # Result is found if that hexagonal number is also pentagonal
        if is_pentagonal_number(hexagonal_number):
            break
        m += 1

    return m, hexagonal_number


def main():
    start_time = time.time()
    result = do_work()
    print("The next triangular number that is also pentagonal and hexagonal is {0}, "
          "found in {1} seconds.\nThe hexagonal index is {2}. The triangular index is {3}."
          .format(result[1], time.time() - start_time, result[0], 2 * result[0] - 1))


if __name__ == "__main__":
    main()
